version: "3.4"
services:
  nginx:
    ports:
      - "80:80"
  api-server:
    hostname: "api-server"
    deploy:
      replicas: 8
      restart_policy:
        condition: any
        max_attempts: 3
      update_config:
        parallelism: 2
        failure_action: continue
        delay: 10s
        order: stop-first
    build:
      context: .
      args:
        NODE_ENV: production
    environment:
      NODE_ENV: production
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      SESSION_SECRET: ${SESSION_SECRET}
    command: node index.js

  # watchtower:
  #   image: containrrr/watchtower
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     WATCHTOWER_TRACE: "true"
  #     WATCHTOWER_DEBUG: "true"
  #     WATCHTOWER_POLL_INTERVAL: 50
  mongo:
    hostname: "mongo"
    deploy:
      replicas: 2
      restart_policy:
        condition: any
        max_attempts: 3
      update_config:
        parallelism: 2
        failure_action: continue
        delay: 10s
        order: stop-first
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
  redis:
    hostname: "redis"
    deploy:
      replicas: 2
      restart_policy:
        condition: any
        max_attempts: 3
